//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RFIDIntegratedApplication.ServiceReference3 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfParam", Namespace="http://schemas.datacontract.org/2004/07/CalculateApp")]
    [System.SerializableAttribute()]
    public partial class ConfParam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string epcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double xIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int yEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double yIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int yStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int zEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double zIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int zStartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string epc {
            get {
                return this.epcField;
            }
            set {
                if ((object.ReferenceEquals(this.epcField, value) != true)) {
                    this.epcField = value;
                    this.RaisePropertyChanged("epc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int xEnd {
            get {
                return this.xEndField;
            }
            set {
                if ((this.xEndField.Equals(value) != true)) {
                    this.xEndField = value;
                    this.RaisePropertyChanged("xEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double xInterval {
            get {
                return this.xIntervalField;
            }
            set {
                if ((this.xIntervalField.Equals(value) != true)) {
                    this.xIntervalField = value;
                    this.RaisePropertyChanged("xInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int xStart {
            get {
                return this.xStartField;
            }
            set {
                if ((this.xStartField.Equals(value) != true)) {
                    this.xStartField = value;
                    this.RaisePropertyChanged("xStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int yEnd {
            get {
                return this.yEndField;
            }
            set {
                if ((this.yEndField.Equals(value) != true)) {
                    this.yEndField = value;
                    this.RaisePropertyChanged("yEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double yInterval {
            get {
                return this.yIntervalField;
            }
            set {
                if ((this.yIntervalField.Equals(value) != true)) {
                    this.yIntervalField = value;
                    this.RaisePropertyChanged("yInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int yStart {
            get {
                return this.yStartField;
            }
            set {
                if ((this.yStartField.Equals(value) != true)) {
                    this.yStartField = value;
                    this.RaisePropertyChanged("yStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int zEnd {
            get {
                return this.zEndField;
            }
            set {
                if ((this.zEndField.Equals(value) != true)) {
                    this.zEndField = value;
                    this.RaisePropertyChanged("zEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double zInterval {
            get {
                return this.zIntervalField;
            }
            set {
                if ((this.zIntervalField.Equals(value) != true)) {
                    this.zIntervalField = value;
                    this.RaisePropertyChanged("zInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int zStart {
            get {
                return this.zStartField;
            }
            set {
                if ((this.zStartField.Equals(value) != true)) {
                    this.zStartField = value;
                    this.RaisePropertyChanged("zStart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference3.ICalculateService")]
    public interface ICalculateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/init", ReplyAction="http://tempuri.org/ICalculateService/initResponse")]
        void init(string epc, RFIDIntegratedApplication.ServiceReference3.ConfParam confParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/init", ReplyAction="http://tempuri.org/ICalculateService/initResponse")]
        System.Threading.Tasks.Task initAsync(string epc, RFIDIntegratedApplication.ServiceReference3.ConfParam confParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/calculate", ReplyAction="http://tempuri.org/ICalculateService/calculateResponse")]
        void calculate(string epc, double antX, double antY, double Z, int freq, double measuredPhase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/calculate", ReplyAction="http://tempuri.org/ICalculateService/calculateResponse")]
        System.Threading.Tasks.Task calculateAsync(string epc, double antX, double antY, double Z, int freq, double measuredPhase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/clear", ReplyAction="http://tempuri.org/ICalculateService/clearResponse")]
        void clear(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/clear", ReplyAction="http://tempuri.org/ICalculateService/clearResponse")]
        System.Threading.Tasks.Task clearAsync(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/clearAll", ReplyAction="http://tempuri.org/ICalculateService/clearAllResponse")]
        void clearAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculateService/clearAll", ReplyAction="http://tempuri.org/ICalculateService/clearAllResponse")]
        System.Threading.Tasks.Task clearAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculateServiceChannel : RFIDIntegratedApplication.ServiceReference3.ICalculateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateServiceClient : System.ServiceModel.ClientBase<RFIDIntegratedApplication.ServiceReference3.ICalculateService>, RFIDIntegratedApplication.ServiceReference3.ICalculateService {
        
        public CalculateServiceClient() {
        }
        
        public CalculateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void init(string epc, RFIDIntegratedApplication.ServiceReference3.ConfParam confParam) {
            base.Channel.init(epc, confParam);
        }
        
        public System.Threading.Tasks.Task initAsync(string epc, RFIDIntegratedApplication.ServiceReference3.ConfParam confParam) {
            return base.Channel.initAsync(epc, confParam);
        }
        
        public void calculate(string epc, double antX, double antY, double Z, int freq, double measuredPhase) {
            base.Channel.calculate(epc, antX, antY, Z, freq, measuredPhase);
        }
        
        public System.Threading.Tasks.Task calculateAsync(string epc, double antX, double antY, double Z, int freq, double measuredPhase) {
            return base.Channel.calculateAsync(epc, antX, antY, Z, freq, measuredPhase);
        }
        
        public void clear(string epc) {
            base.Channel.clear(epc);
        }
        
        public System.Threading.Tasks.Task clearAsync(string epc) {
            return base.Channel.clearAsync(epc);
        }
        
        public void clearAll() {
            base.Channel.clearAll();
        }
        
        public System.Threading.Tasks.Task clearAllAsync() {
            return base.Channel.clearAllAsync();
        }
    }
}
