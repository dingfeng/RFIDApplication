//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RFIDIntegratedApplication.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DMCPosDto", Namespace="http://schemas.datacontract.org/2004/07/DMCControl")]
    [System.SerializableAttribute()]
    public partial class DMCPosDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong microSecondField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong microSecond {
            get {
                return this.microSecondField;
            }
            set {
                if ((this.microSecondField.Equals(value) != true)) {
                    this.microSecondField = value;
                    this.RaisePropertyChanged("microSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IDmcControlService")]
    public interface IDmcControlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/rotatingRun", ReplyAction="http://tempuri.org/IDmcControlService/rotatingRunResponse")]
        void rotatingRun(double finalAngle, double speed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/rotatingRun", ReplyAction="http://tempuri.org/IDmcControlService/rotatingRunResponse")]
        System.Threading.Tasks.Task rotatingRunAsync(double finalAngle, double speed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/horizontalRun", ReplyAction="http://tempuri.org/IDmcControlService/horizontalRunResponse")]
        void horizontalRun(double finalPos, double speed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/horizontalRun", ReplyAction="http://tempuri.org/IDmcControlService/horizontalRunResponse")]
        System.Threading.Tasks.Task horizontalRunAsync(double finalPos, double speed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/resetHorizontalPos", ReplyAction="http://tempuri.org/IDmcControlService/resetHorizontalPosResponse")]
        void resetHorizontalPos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/resetHorizontalPos", ReplyAction="http://tempuri.org/IDmcControlService/resetHorizontalPosResponse")]
        System.Threading.Tasks.Task resetHorizontalPosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/resetRotatingPos", ReplyAction="http://tempuri.org/IDmcControlService/resetRotatingPosResponse")]
        void resetRotatingPos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/resetRotatingPos", ReplyAction="http://tempuri.org/IDmcControlService/resetRotatingPosResponse")]
        System.Threading.Tasks.Task resetRotatingPosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/getCurrentPos", ReplyAction="http://tempuri.org/IDmcControlService/getCurrentPosResponse")]
        float[] getCurrentPos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/getCurrentPos", ReplyAction="http://tempuri.org/IDmcControlService/getCurrentPosResponse")]
        System.Threading.Tasks.Task<float[]> getCurrentPosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/originPoint", ReplyAction="http://tempuri.org/IDmcControlService/originPointResponse")]
        void originPoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/originPoint", ReplyAction="http://tempuri.org/IDmcControlService/originPointResponse")]
        System.Threading.Tasks.Task originPointAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/emergencyStop", ReplyAction="http://tempuri.org/IDmcControlService/emergencyStopResponse")]
        void emergencyStop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/emergencyStop", ReplyAction="http://tempuri.org/IDmcControlService/emergencyStopResponse")]
        System.Threading.Tasks.Task emergencyStopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/tryDequeue", ReplyAction="http://tempuri.org/IDmcControlService/tryDequeueResponse")]
        RFIDIntegratedApplication.ServiceReference2.DMCPosDto[] tryDequeue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/tryDequeue", ReplyAction="http://tempuri.org/IDmcControlService/tryDequeueResponse")]
        System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference2.DMCPosDto[]> tryDequeueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/shutdown", ReplyAction="http://tempuri.org/IDmcControlService/shutdownResponse")]
        void shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/shutdown", ReplyAction="http://tempuri.org/IDmcControlService/shutdownResponse")]
        System.Threading.Tasks.Task shutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/begin", ReplyAction="http://tempuri.org/IDmcControlService/beginResponse")]
        void begin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDmcControlService/begin", ReplyAction="http://tempuri.org/IDmcControlService/beginResponse")]
        System.Threading.Tasks.Task beginAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDmcControlServiceChannel : RFIDIntegratedApplication.ServiceReference2.IDmcControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DmcControlServiceClient : System.ServiceModel.ClientBase<RFIDIntegratedApplication.ServiceReference2.IDmcControlService>, RFIDIntegratedApplication.ServiceReference2.IDmcControlService {
        
        public DmcControlServiceClient() {
        }
        
        public DmcControlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DmcControlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DmcControlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DmcControlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void rotatingRun(double finalAngle, double speed) {
            base.Channel.rotatingRun(finalAngle, speed);
        }
        
        public System.Threading.Tasks.Task rotatingRunAsync(double finalAngle, double speed) {
            return base.Channel.rotatingRunAsync(finalAngle, speed);
        }
        
        public void horizontalRun(double finalPos, double speed) {
            base.Channel.horizontalRun(finalPos, speed);
        }
        
        public System.Threading.Tasks.Task horizontalRunAsync(double finalPos, double speed) {
            return base.Channel.horizontalRunAsync(finalPos, speed);
        }
        
        public void resetHorizontalPos() {
            base.Channel.resetHorizontalPos();
        }
        
        public System.Threading.Tasks.Task resetHorizontalPosAsync() {
            return base.Channel.resetHorizontalPosAsync();
        }
        
        public void resetRotatingPos() {
            base.Channel.resetRotatingPos();
        }
        
        public System.Threading.Tasks.Task resetRotatingPosAsync() {
            return base.Channel.resetRotatingPosAsync();
        }
        
        public float[] getCurrentPos() {
            return base.Channel.getCurrentPos();
        }
        
        public System.Threading.Tasks.Task<float[]> getCurrentPosAsync() {
            return base.Channel.getCurrentPosAsync();
        }
        
        public void originPoint() {
            base.Channel.originPoint();
        }
        
        public System.Threading.Tasks.Task originPointAsync() {
            return base.Channel.originPointAsync();
        }
        
        public void emergencyStop() {
            base.Channel.emergencyStop();
        }
        
        public System.Threading.Tasks.Task emergencyStopAsync() {
            return base.Channel.emergencyStopAsync();
        }
        
        public RFIDIntegratedApplication.ServiceReference2.DMCPosDto[] tryDequeue() {
            return base.Channel.tryDequeue();
        }
        
        public System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference2.DMCPosDto[]> tryDequeueAsync() {
            return base.Channel.tryDequeueAsync();
        }
        
        public void shutdown() {
            base.Channel.shutdown();
        }
        
        public System.Threading.Tasks.Task shutdownAsync() {
            return base.Channel.shutdownAsync();
        }
        
        public void begin() {
            base.Channel.begin();
        }
        
        public System.Threading.Tasks.Task beginAsync() {
            return base.Channel.beginAsync();
        }
    }
}
